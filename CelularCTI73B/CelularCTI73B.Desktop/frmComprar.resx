<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>